name: Maven Build
run-name: >
  ${{ github.workflow }}: ${{ github.event_name }} for ${{ github.ref_name }} by @${{ github.actor }} 

on:
  workflow_dispatch:
    inputs:
      deploy:
        description: "By default feature branches are not deployed. Enable to enforce"
        required: true
        type: boolean
        default: false
  push:
    branches: [ "main", "master", "feature/**", "release/**" ]
  schedule:
    - cron: 5 5 * * MON-FRI # daily at 5:05 am (Except on Weekends)
jobs:
  
  setup:
    
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
    
    outputs:
      BRANCH_MVN_VERSION: ${{ steps.set_version.outputs.BRANCH_MVN_VERSION }}
      BRANCH_NAME: ${{ steps.set_version.outputs.BRANCH_NAME }}
      MVN_VERSION: ${{ steps.set_version.outputs.MVN_VERSION }}
    
    
    steps:
      - name: Validate
        id: validate
        run: |
          if [[ "${BRANCH_NAME}" == "master" ]]; then 
            echo "::error:: ### Build for master has been deprecated. Use branch main instead!"
            exit 1
          fi

      - uses: actions/checkout@v4

      - name: Set up java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml.
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Set Maven Versions
        id: set_version
        run: |
          "${GITHUB_WORKSPACE}/.github/workflows/scripts/set_maven_version.sh"    
          
      - run: |
          echo "##################debug####################"
          echo "$ALLMYSECRETS"
          echo "$ALLMYVARS"
          echo "$ALLMYOUTPUT"
        shell: bash
        env:
          ALLMYSECRETS: ${{ toJSON(secrets) }}
          ALLMYVARS: ${{ toJSON(vars) }}
          ALLMYOUTPUT: ${{ toJSON(steps.set_version.outputs) }}
  
  
  build:
    runs-on: ubuntu-latest
    
    needs: [ setup ]
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Maven settings.xml
        uses: whelk-io/maven-settings-xml-action@v21
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ github.token }}
          ARTIFACTORY_URL: ${{ vars.ARTIFACTORY_CI_SWP_URL }}
        with:
          servers: >
            [
              {
                "id": "central",
                "username": "${ARTIFACTORY_USERNAME}",
                "password": "${env.ARTIFACTORY_TOKEN}"
              },
              {
                "id": "snapshots",
                "username": "${ARTIFACTORY_USERNAME}",
                "password": "${env.ARTIFACTORY_TOKEN}"
              },
              {
                "id": "github",
                "username": "${env.GITHUB_ACTOR}",
                "password": "${env.GITHUB_TOKEN}"
              }
            ]
          output_file: ${{ github.workspace }}/.github/.m2/artifactory/settings.xml # by default it goes to ~/.m2/settings.xml

      - run: |
          echo "##################debug####################"
          echo "$ALLMYSECRETS"
          echo "$ALLMYVARS"
          echo "$ALLMYOUTPUT"
        shell: bash
        env:
          ALLMYSECRETS: ${{ toJSON(secrets) }}
          ALLMYVARS: ${{ toJSON(vars) }}
          ALLMYOUTPUT: ${{ toJSON(needs.setup.outputs) }}
      
      - name: Run Maven Build
        env:
          GITHUB_TOKEN: ${{ github.token }}
          BRANCH_MVN_VERSION: ${{needs.setup.outputs.BRANCH_MVN_VERSION}}
          BRANCH_NAME: ${{needs.setup.outputs.BRANCH_NAME}}
          ARTIFACTORY_URL: ${{ vars.ARTIFACTORY_CI_SWP_URL }}
          ARTIFACTORY_USERNAME: ${{ vars.ARTIFACTORY_CI_SWP_USERNAME }}
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_CI_SWP_TOKEN }}
          FORCE_DEPLOY: ${{ github.event.inputs.deploy }}
        run: |
          set -o pipefail    # don't hide errors within pipes
          set -o nounset     # abort on unbound variable
          set -o errexit     # abort on nonzero exit status
          if [[ "${BRANCH_NAME}" == "main" ]]; then
            echo "::notice:: ### Build of Main. Version: $BRANCH_MVN_VERSION"
          else
            echo "::notice:: ### Build of Feature Branch ${BRANCH_NAME}. Version: $BRANCH_MVN_VERSION"
            mvn -B versions:set -Partifactory -e -DnewVersion="$BRANCH_MVN_VERSION" -s $GITHUB_WORKSPACE/.github/.m2/artifactory/settings.xml
          fi
          if [[ "${BRANCH_NAME}" == "main" ]] || [[ "${FORCE_DEPLOY}" == "true" ]]; then
            mvn -B deploy -Partifactory -s $GITHUB_WORKSPACE/.github/.m2/artifactory/settings.xml
          else
            mvn -B install -Partifactory -s $GITHUB_WORKSPACE/.github/.m2/artifactory/settings.xml
          fi
  
  deploy:
    # TODO: change to camunda ci server
    #runs-on: [camunda-ci]
    runs-on: ubuntu-latest

    needs: [ setup,build ]
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Maven settings.xml
        uses: whelk-io/maven-settings-xml-action@v21
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ github.token }}
          ARTIFACTORY_URL: ${{ vars.ARTIFACTORY_CI_SWP_URL }}
        with:
          servers: >
            [
              {
                "id": "central",
                "username": "${ARTIFACTORY_USERNAME}",
                "password": "${env.ARTIFACTORY_TOKEN}"
              },
              {
                "id": "snapshots",
                "username": "${ARTIFACTORY_USERNAME}",
                "password": "${env.ARTIFACTORY_TOKEN}"
              },
              {
                "id": "github",
                "username": "${env.GITHUB_ACTOR}",
                "password": "${env.GITHUB_TOKEN}"
              }
            ]
          output_file: ${{ github.workspace }}/.github/.m2/artifactory/settings.xml # by default it goes to ~/.m2/settings.xml  

      - name: Deploy
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ github.token }}
          ARTIFACTORY_URL: ${{ vars.ARTIFACTORY_CI_SWP_URL }}
          ARTIFACTORY_USERNAME: ${{ vars.ARTIFACTORY_CI_SWP_USERNAME }}
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_CI_SWP_TOKEN }}
          BRANCH_NAME: ${{needs.setup.outputs.BRANCH_NAME}}
          MVN_VERSION: ${{needs.setup.outputs.MVN_VERSION}}
          BRANCH_MVN_VERSION: ${{needs.setup.outputs.BRANCH_MVN_VERSION}}
          FORCE_DEPLOY: ${{ github.event.inputs.deploy }}
          TOMCAT_NAME: tomcat
          TOMCAT_DIR: /opt/tomcat/updated
          DB_SECRET: ${{ secrets.CI_JTT_DB_PASSWORD }}
          ENVIRONMENT: ci
          TOMCAT_USER: tomcat
        run: |
          # run deploy script
          "${GITHUB_WORKSPACE}/.github/workflows/scripts/deploy.sh"    
  
  sonar-scan:
    
    needs: [setup,build]
    
    permissions:
      actions: read
      contents: write
    
    runs-on: ubuntu-latest
    
    steps:

      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml.
          settings-path: ${{ github.workspace }} # location for the settings.xml file . 

      - name: Setup Maven settings.xml
        uses: whelk-io/maven-settings-xml-action@v21
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ github.token }}
          ARTIFACTORY_URL: ${{ vars.ARTIFACTORY_CI_SWP_URL }}
          ARTIFACTORY_USERNAME: ${{ vars.ARTIFACTORY_CI_SWP_USERNAME }}
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_CI_SWP_TOKEN }}
        with:
          servers: >
            [
              {
                "id": "central",
                "username": "${ARTIFACTORY_USERNAME}",
                "password": "${env.ARTIFACTORY_TOKEN}"
              },
              {
                "id": "snapshots",
                "username": "${ARTIFACTORY_USERNAME}",
                "password": "${env.ARTIFACTORY_TOKEN}"
              },
              {
                "id": "github",
                "username": "${env.GITHUB_ACTOR}",
                "password": "${env.GITHUB_TOKEN}"
              }
            ]
          output_file: ${{ github.workspace }}/.github/.m2/artifactory/settings.xml

      - name: Run with Jacoco
        env:
          GITHUB_TOKEN: ${{ github.token }}
          BRANCH_MVN_VERSION: ${{needs.setup.outputs.BRANCH_MVN_VERSION}}
          BRANCH_NAME: ${{needs.setup.outputs.BRANCH_NAME}}
          ARTIFACTORY_URL: ${{ vars.ARTIFACTORY_CI_SWP_URL }}
          ARTIFACTORY_USERNAME: ${{ vars.ARTIFACTORY_CI_SWP_USERNAME }}
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_CI_SWP_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          set -o pipefail    # don't hide errors within pipes
          set -o nounset     # abort on unbound variable
          set -o errexit     # abort on nonzero exit status

          if [[ "${BRANCH_NAME}" == "main" ]]; then
            echo "::notice:: ### Build of Main. Version: $BRANCH_MVN_VERSION"
          else
            echo "::notice:: ### Build of Feature Branch ${BRANCH_NAME}. Version: $BRANCH_MVN_VERSION"
            mvn -B versions:set -Partifactory -e -DnewVersion="$BRANCH_MVN_VERSION" -s $GITHUB_WORKSPACE/.github/.m2/artifactory/settings.xml
          fi
          mvn -B clean verify \
          -P 'artifactory,coverage' \
          -s $GITHUB_WORKSPACE/.github/.m2/artifactory/settings.xml \

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml.
          settings-path: ${{ github.workspace }} # location for the settings.xml file     

      - name: sonar
        env:
          GITHUB_TOKEN: ${{ github.token }}
          BRANCH_MVN_VERSION: ${{needs.setup.outputs.BRANCH_MVN_VERSION}}
          BRANCH_NAME: ${{needs.setup.outputs.BRANCH_NAME}}
          ARTIFACTORY_URL: ${{ vars.ARTIFACTORY_CI_SWP_URL }}
          ARTIFACTORY_USERNAME: ${{ vars.ARTIFACTORY_CI_SWP_USERNAME }}
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_CI_SWP_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [[ "${BRANCH_NAME}" == "main" ]]; then
            echo "::notice:: ### Build of Main. Version: $BRANCH_MVN_VERSION"
            mvn -B sonar:sonar \
                -P 'artifactory,coverage' \
                -s $GITHUB_WORKSPACE/.github/.m2/artifactory/settings.xml \
                -Dsonar.token=${SONAR_TOKEN} \
                -Dsonar.host.url=https://sonarcloud.io \
                -Dsonar.sourceEncoding=UTF-8 \
                -Dsonar.organization=swissperform \
                -Dsonar.projectKey=ch.swissperform.workflow.hello-world \
                -Dsonar.branch.name=main
          else
            echo "::notice:: ### Build of Feature Branch ${BRANCH_NAME}. Version: $BRANCH_MVN_VERSION"
            mvn -B versions:set -Partifactory -e -DnewVersion="$BRANCH_MVN_VERSION" -s $GITHUB_WORKSPACE/.github/.m2/artifactory/settings.xml
            mvn -B sonar:sonar \
                -P 'artifactory,coverage' \
                -s $GITHUB_WORKSPACE/.github/.m2/artifactory/settings.xml \
                -Dsonar.token=${SONAR_TOKEN} \
                -Dsonar.host.url=https://sonarcloud.io \
                -Dsonar.sourceEncoding=UTF-8 \
                -Dsonar.organization=swissperform \
                -Dsonar.projectKey=ch.swissperform.workflow.hello-world \
                -Dsonar.branch.name=${BRANCH_NAME} \
                -Dsonar.branch.target=main
          fi
          echo "https://sonarcloud.io/summary/overall?id=ch.swissperform.workflow.hello-world" >> $GITHUB_STEP_SUMMARY
