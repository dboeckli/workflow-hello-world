name: Maven Release

on:
  workflow_dispatch:

permissions: write-all

jobs:
  
  check-branch:
    name: Check Branch
    runs-on: ubuntu-latest
    steps:

      - name: Checkout project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for main
        run: |
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [[ "$BRANCH" == "main" ||  "$BRANCH" == "master" ]];
          then
            echo "Releasing main branch, resuming"
          else
            echo "Releasing only allowed for branch 'main' or 'master'"
            exit 1
          fi
  
  check-maven-version:
    name: Check maven Version
    runs-on: ubuntu-latest
    
    steps:

      - name: Checkout project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version
        run: |
          MAVEN_VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )
          if [[ "$MAVEN_VERSION" == *SNAPSHOT ]];
          then
            echo "Maven version ends with SNAPSHOT"
          else
            echo "Maven version must be a SNAPSHOT version to release"
            exit 1
          fi
  
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ check-branch, check-maven-version ]
    steps:

      - name: Checkout project
        uses: actions/checkout@v4
        with:
          # requires admin gitHub token which can do merge on master
          token: ${{ secrets.RELEASE_TOKEN }}
          fetch-depth: 0

      - name: Set up java 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: 'maven'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml.
          settings-path: ${{ github.workspace }} # location for the settings.xml file  

      - name: View settings.xml
        run: |
          echo "### show settings.xml ###"
          cat ./settings.xml

      - name: Setup git user
        env:
          CI_USER_EMAIL: ${{ vars.CI_USER_EMAIL }}
          CI_USER: ${{ vars.CI_USER }}
        run: |
          # Check if required parameters are set
          required_params=("CI_USER_EMAIL" "CI_USER")
          for param in "${required_params[@]}"; do
            if [ -z "${!param}" ]; then
              echo "::error::Required parameter $param is not set"
              exit 1
            fi
          done
          git config --global user.email "${{ vars.CI_USER_EMAIL }}" 
          git config --global user.name "${{ vars.CI_USER }}"        

      - name: Release
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          # requires admin gitHub token which can do merge on master
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          DOCKER_USER: ${{ vars.DOCKER_USER }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        run: |
          # Check if required parameters are set
          required_params=("GITHUB_ACTOR" "GITHUB_TOKEN" "DOCKER_USER" "DOCKER_TOKEN")
          for param in "${required_params[@]}"; do
          if [ -z "${!param}" ]; then
            echo "::error::Required parameter $param is not set"
            exit 1
          fi
          done
          mvn -B release:prepare release:perform -s $GITHUB_WORKSPACE/settings.xml
